#!/usr/bin/env ruby

require 'qtools'
require 'optparse'

Options = Struct.new(:name, :mem, :queue, :cpus, :time)

args = Options.new
OptionParser.new do |opts|
  opts.banner = "Usage: qtools 'python3 my_script.py ...' [options]"

  opts.on("-n", "--name NAME", "Name for the job") do |n|
    args.name = n
  end
  opts.on("-m", "--memory MEMORY", "Memory for the job (e.g., 80gb)") do |m|
    args.mem = m
  end
  opts.on("-q", "--queue QUEUE_TITLE", "Select a queue for the job") do |q|
    args.queue = q
  end
  opts.on("-c", "--cpu NUMBER_OF_CORES", "Number of CPIs for the job (e.g., 8)") do |c|
    args.cpus = c
  end
  opts.on("-t", "--time TIME_IN_HOURS", "Set the time limit for the job (default is 24 hours)") do |t|
    args.time = t
  end
end.parse!

command = ARGV

if command.empty?
  fail "Usage: qtools 'python3 my_script.py ...' [options]"
end

header_sge = <<-HEADER
#!/bin/bash

#$ -V
#$ -cwd
HEADER

header_shell = "#!/bin/bash\n"

header_pbs_tree = Hash.new([])
header_pbs_tree[:l] << "walltime=#{args.time ? args.time : '24'}:00:00"
header_pbs_tree[:d] = ['.']

if args.name
  header_pbs_tree[:N] = [args.name]
end

if args.mem
  header_pbs_tree[:l] << "mem=#{args.mem}"
end

if args.queue
  header_pbs_tree[:q] << [args.queue]
end

if args.cpus
  header_pbs_tree[:l] << "ncpus=#{args.cpus}"
end

header_pbs = header_pbs_tree.map { |k, v| "#PBS -#{k} #{v.join(',')}" }.join("\n")

sh_prefix_guess = (command[0].split[1].include?('.') or command[0].split.length == 1) ? command[0].split[1] : command[0].split[0]  # guess if script or executable
sh_prefix = sh_prefix_guess.include?('.') ? sh_prefix_guess.match(/(.*)\.(.*?)/)[1] : sh_prefix_guess
sh_name = (header_pbs_tree[:N] ? header_pbs_tree[:N][0] : sh_prefix) + '.sh'

File.write(sh_name, [header_shell, header_pbs, "", command[0]].join("\n"))

puts "-- Submit #{sh_name} for execution? [y/n]"
answer = STDIN.gets.strip.downcase
if answer == 'y' or answer == 'yes'
  system("qsub #{sh_name}")
  puts "-- Ok, master, #{sh_name} is submitted."
else
  puts "-- Ok, master. No means no."
end
